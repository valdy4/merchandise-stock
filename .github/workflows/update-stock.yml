name: Update Stock Data

on:
  repository_dispatch:
    types: [update_stock]

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update stock.json
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'stock.json';
            const payload = ${{ toJSON(github.event.client_payload) }};
            const action = payload.action;
            const data = payload.data;

            // Read current data
            let stockData = { stock: [], history: [] };
            try {
              stockData = JSON.parse(fs.readFileSync(path, 'utf8'));
            } catch (e) {
              console.log('stock.json not found, creating a new one.');
            }

            // --- Business Logic ---
            if (action === 'ADD_ITEM') {
              const existingItem = stockData.stock.find(item => 
                item.item === data.item && item.color === data.color && item.size === data.size
              );
              if (existingItem) {
                existingItem.stock += data.stock;
              } else {
                stockData.stock.push(data);
              }
            } else if (action === 'CHECKOUT_ITEM') {
               const itemToUpdate = stockData.stock[data.index];
               if (itemToUpdate) {
                  itemToUpdate.stock -= data.quantity;
               }
            } else if (action === 'DELETE_ITEM') {
                stockData.stock.splice(data.index, 1);
            } else if (action === 'EDIT_ITEM') {
                stockData.stock[data.index] = data.newValues;
            }
            
            // Add history entry
            const historyEntry = {
              timestamp: new Date().toISOString(),
              action: action,
              details: data
            };
            stockData.history.unshift(historyEntry);

            // Write back to file
            fs.writeFileSync(path, JSON.stringify(stockData, null, 2));

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update stock data via form"
          file_pattern: "stock.json"
```

---

### Step 3: Enable GitHub Pages

1.  In your GitHub repository, go to **Settings > Pages**.
2.  Under "Source," select the `main` branch (or `master`) and click **Save**.
3.  GitHub will give you a URL where your site is published (e.g., `https://your-username.github.io/your-repo-name/`). It might take a minute or two to go live.

---

### Step 4: Create a Personal Access Token (PAT)

This is a secure password that your website will use to get permission to trigger the GitHub Action.

1.  Go to your GitHub **Settings** (click your profile picture in the top-right).
2.  Go to **Developer settings > Personal access tokens > Tokens (classic)**.
3.  Click **Generate new token (classic)**.
4.  Give it a **Note** (e.g., "Merchandise Stock App").
5.  Set the **Expiration** to "No expiration".
6.  Check the box for **`repo`**. This gives it permission to modify your repository files.
7.  Click **Generate token**.
8.  **IMPORTANT:** Copy this token immediately and save it somewhere safe. **You will never see it again.**

---

### Step 5: Configure the `index.html` File

This is the final and most important step.

1.  Go back to the `index.html` file in your repository and click the **Edit** (pencil) icon.
2.  At the top of the `<script>` tag, you will see these lines:

    ```javascript
    const GITHUB_USERNAME = "YOUR_GITHUB_USERNAME";
    const GITHUB_REPO = "YOUR_REPO_NAME";
    const GITHUB_TOKEN = "YOUR_PERSONAL_ACCESS_TOKEN";
    
